qnorm(.975, 3, 4)
qnois(.4 ,2)
rnorm(50, 3, 2)
a <- rnorm(50, 3, 2)
his(a)
hist(a)
#z=-3.2
1-pnorm(1,2)
pnorm(-1,15)*2
2*pnorm(-1,15)
2*(1-pnorm(.7))
pt(2, 14)
?pnorm
a <- c(12, 8, 14, 20, 26, 26, 20, 21, 18, 24, 30, 21, 18, 16, 10, 20)
mean(a)
z <- ((19-12)/(7/sqrt(16))
z <- ((19-12)/(7/sqrt(16))
z <- ((19-12)/(7/sqrt(16)))
z
pnorm(4,lower.tail = FALSE)
z <- ((19-16)/(7/(sqrt(16)))
z
z
z <- (19-16)/(7/(sqrt(16)))
z
z
pnorm(z, lower.tail = FALSE)
pnorm(z, lower.tail = FALSE)*2
pnorm(z, lower.tail = FALSE)*2
s <- sd(a)
s <- sd(a)
s
t <- (19-18)/(s/sqrt(16))
t
t <- (9.333-8.375)/sqrt((4.945^2/12)+(1.187^2/8))
t
prorm(t)
pnorm(t)
pt(t)
pt(t, 18)
pt(t, 18)
t
pt(t, 18)
pt(t, 18)
t.test(t, 18)
t.test(t)
t.test(9.333,8.375,alternative = "two.sided")
pt(q = t, df = 18, lower.tail = FALSE)
pt(q = t, df = 18, lower.tail = FALSE)*2
pt(q = t, df = 18, lower.tail = FALSE)
pt(q = t, df = 18)
t
pt(q = t, df= n_1+n_2-2, lower.tail=FALSE)
t <- c(3.153827009)
pt(q = t, df= 11, lower.tail=FALSE)
A <- c(11.56, 9.16, 10.81, 11.35, 6.04, 8.60, 9.72, 12.26)
B <- c(16.41, 18.52, 14.13, 12.49, 16.29, 14.54, 14.60, 15.79)
var(A)
var(B)
s_1 <- sd(A)
s_2 <- sd(B)
sd(A)/sd(B)
sd(A)
sd(B)
s_1/s_2
2.014737/1.818013
s_1 <- sd(A)
A <- c(11.56, 9.16, 10.81, 11.35, 6.04, 8.60, 9.72, 12.26)
B <- c(16.41, 18.52, 14.13, 12.49, 16.29, 14.54, 14.60, 15.79)
s_1 <- sd(A)
s_2 <- sd(B)
7(s_1^2+s_2^2)/12
7(s_1^2+s_2^2)/12
7*(s_1^2+s_2^2)/12
s_pl <- 7*(s_1^2+s_2^2)/12
s_pl
qnorm(0.05, lower.tail=F)
qnorm(0.1, lower.tail =F)
c <- qnorm(0.05, lower.tail=F) + qnorm(0.1, lower.tail =F)
c
n <- 2*(s_pl)*(c^2)
n
s_pl
s_pl <- 7*(s_1^2+s_2^2)/14
s_pl
c <- qnorm(0.05, lower.tail=F) + qnorm(0.1, lower.tail =F)
n <- 2*(s_pl)*(c^2)
n
n
(60-50)/(10/sqrt(10))
z <- (60-50)/(10/sqrt(10))
c <- pnorm(z, lower.tail=FALSE)
c
c <- pnorm(10, lower.tail=FALSE)
c
z_a <- qnorm(0.01, lower.tail = FALSE)
z_b <- qnorm(0.2, lower.tail = FALSE)
9(z_a + z_b)^2 / 4
(9(z_a + z_b)^2)/4
(9(z_a + z_b)^2)/4
k <- (9(z_a + z_b)^2)/4
m_1 <- c(1.186, 1.151, 1.322, 1.339, 1.200, 1.402, 1.365, 1.537, 1.559)
m_2 <- c(1.061, 0.992, 1.063, 1.062, 1.065, 1.178, 1.037, 1.086, 1.052)
A <- c(1.186, 1.151, 1.322, 1.339, 1.200, 1.402, 1.365, 1.537, 1.559)
B <- c(1.061, 0.992, 1.063, 1.062, 1.065, 1.178, 1.037, 1.086, 1.052)
s_1 <- sd(A)
s_2 <- sd(B)
s_1
s_2
s_1/s_2
m_a <- mean(A)
m_b <- mean(B)
m_a
t <- ((m_a)-(m_b))/sqrt((s_1^2)/9)+(s_2^2)/9)
t <- ((m_a)-(m_b))/sqrt((s_1^2)/9)+(s_2^2)/9))
t <- ((m_a)-(m_b))/sqrt((s_1^2)/9)+(s_2^2)/9
t <- ((m_a)-(m_b))/sqrt((s_1^2)/9)+(s_2^2)/9)
A <- c(1.186, 1.151, 1.322, 1.339, 1.200, 1.402, 1.365, 1.537, 1.559)
B <- c(1.061, 0.992, 1.063, 1.062, 1.065, 1.178, 1.037, 1.086, 1.052)
m_a <- mean(A)
m_b <- mean(B)
s_1 <- sd(A)
s_2 <- sd(B)
t <- ((m_a)-(m_b))/sqrt((s_1^2)/9)+(s_2^2)/9)
t <- ((m_a)-(m_b))/sqrt((s_1^2)/9)+(s_2^2)/9)
t <- ((m_a)-(m_b))/sqrt((s_1^2)/9)+(s_2^2)/9))
t <- ((m_a)-(m_b))/sqrt((s_1^2)/9+(s_2^2)/9)
t
df <- c ((s_1^2)/9+(s_2^2)/9)^2/(s_1^4/9^2(8))+(s_2^4/9^2(8))
df <- c((s_1^2)/9+(s_2^2)/9)^2/(s_1^4/9^2(8))+(s_2^4/9^2(8))
df <- c(((s_1^2)/9)+((s_2^2)/9)^2)/((s_1^4/9^2(8))+(s_2^4/9^2(8)))
df_1 <- c (((s_1^2)/9)+((s_2^2)/9)^2)
df_1
df_2 <- c((s_1)^4/9^2(8) + (s_2)^4/9^2(8))
df_2 <- c((s_1)^4/9^2*(8) + (s_2)^4/9^2*(8))
df_2
df_1/df_2
t
df <- c(df_1/df_2)
c
df_2 <- c((s_1)^4/(9^2)*(8) + (s_2)^4/(9^2)*(8))
df_1 <- c (((s_1^2)/9)+((s_2^2)/9))^2
df_2 <- c((s_1)^4/(9^2)*(8) + (s_2)^4/(9^2)*(8))
df <- c(df_1/df_2)
df
df_1 <- (((s_1^2)/9)+((s_2^2)/9))^2
df_2 <- ((s_1)^4/(9^2)*(8) + (s_2)^4/(9^2)*(8))
df_2
df <- c(df_1/df_2)
df
df
df_1 <- (((s_1^2)/9)+((s_2^2)/9))^2
df_2 <- ((s_1)^4/(9^2)*(8) + (s_2)^4/(9^2)*(8))
df_2
df <- (df_1/df_2)
df
df
A <- c(1.186, 1.151, 1.322, 1.339, 1.200, 1.402, 1.365, 1.537, 1.559)
B <- c(1.061, 0.992, 1.063, 1.062, 1.065, 1.178, 1.037, 1.086, 1.052)
m_a <- mean(A)
m_b <- mean(B)
s_1 <- sd(A)
s_2 <- sd(B)
s_1
s_2
s_2/s_2
s_1/s_2
(9(z_a + z_b)^2)/4
z_a <- qnorm(0.01, lower.tail = FALSE)
z_b <- qnorm(0.2, lower.tail = FALSE)
(9(z_a + z_b)^2)/4
(9*(z_a + z_b)^2)/4
s_1 <- sd(A)
s_2 <- sd(B)
A <- c(1.186, 1.151, 1.322, 1.339, 1.200, 1.402, 1.365, 1.537, 1.559)
B <- c(1.061, 0.992, 1.063, 1.062, 1.065, 1.178, 1.037, 1.086, 1.052)
m_a <- mean(A)
m_b <- mean(B)
s_1 <- sd(A)
s_2 <- sd(B)
s_1 <- sd(A)
s_1
s_2
A <- c(1.186, 1.151, 1.322, 1.339, 1.200, 1.402, 1.365, 1.537, 1.559)
B <- c(1.061, 0.992, 1.063, 1.062, 1.065, 1.178, 1.037, 1.086, 1.052)
m_a <- mean(A)
m_b <- mean(B)
s_1 <- sd(A)
s_2 <- sd(B)
s_1
s_2
p_value <- pnorm(q = t, lower.tail = FALSE)*2
p_value
t <- ((m_a)-(m_b))/sqrt((s_1^2)/9+(s_2^2)/9)
p_value <- pnorm(q = t, lower.tail = FALSE)*2
p_value
A <- c(1.186, 1.151, 1.322, 1.339, 1.200, 1.402, 1.365, 1.537, 1.559)
B <- c(1.061, 0.992, 1.063, 1.062, 1.065, 1.178, 1.037, 1.086, 1.052)
m_a <- mean(A)
m_b <- mean(B)
s_1 <- sd(A)
s_2 <- sd(B)
s_1 <- sd(A)
s_1
s_2
s_1/s_2
t <- ((m_a)-(m_b))/sqrt((s_1^2)/9+(s_2^2)/9)
t
p_value <- pnorm(q = t, lower.tail = FALSE)*2
p_value
d <- mean(D)
D <- c(0.125, 0.159, 0.259, 0.277, 0.135, 0.224, 0.328, 0.451, 0.507)
d <- mean(D)
d <- mean(D)
d
s <- (0.125-d)^2+(0.159-d)^2+(0.259-d)^2+(0.277-d)^2+(0.135-d)^2+(0.224-d)^2+(0.328-d)^2+(0.451-d)^2+(0.507-d)^2
d/8
s/8
sqrt(s/8)
d/(sqrt(s/8)/3)
x <- c(1.186, 1.151, 1.322, 1.339, 1.200, 1.402, 1.365, 1.537, 1.559)
y <- c(1.061, 0.992, 1.063, 1.062, 1.065, 1.178, 1.037, 1.086, 1.052)
t.test(x, y, paired = TRUE, alternative = "two.sided")
x <- c(10, 3, 4, 8, 8, 9, 5, 7, 1, 7)
y <- c(8, 4, 2, 5, 7, 8, 4, 5, 2, 5)
t.test(x, y, paired = TRUE, alternative = "two.sided")
t.test(x, y, alternative = "two.sided", var.equal = FALSE)
z <- c(2, -1, 2, 3, 1, 1, 1, 2, -1, 2)
d <- mean(z)
d
sd <- (4(2-d)^2+2(-1-d)^2+(3-d)^2+3(1-d)^2)/9
sd
sd <- (4*(2-d)^2+2*(-1-d)^2+(3-d)^2+3*(1-d)^2)/9
sd
sd1 <- (4*(2-d)^2+2*(-1-d)^2+(3-d)^2+3*(1-d)^2)/9
sd1
sd2 <- sqrt(sd1)
sd2
d
f <- function(x) 3*x+7
curve(f(x), xlim=c(-1,1))
curve(f(x), xlim=c(0,20))
f <- function(x) 1-e^-0.2*x
curve(f(x), xlim=c(0,20))
f <- function(x) 1-exp^-0.2*x
curve(f(x), xlim=c(0,20))
f <- function(x) 1-exp^(-0.2*x)
curve(f(x), xlim=c(0,20))
f <- function(x) 3/4*(1-x^2)
curve(f(x), xlim=c(-1,1))
f <- function(x) 1-exp^-0.2*x
curve(f(x), xlim=c(0,20))
f <- function(x) 1-(exp^(-0.2*x))
curve(f(x), xlim=c(0,20))
f <- function(x) 1-(exp^(-0.2*x))
curve(f(x), xlim=c(0,20))
<- function(x) 1-(e^(-0.2*x))
f <- function(x) 1-(e^(-0.2*x))
curve(f(x), xlim=c(0,20))
f <- function(x) 1-(exp(^-0.2*x))
f <- function(x) 1-exp(x)
f <- function(x) 1-exp(x)
curve(f(x), xlim=c(0,20))
f <- function(x) 1-exp(-0.2x)
f <- function(x) 1-(exp(-0.2x))
f <- function(x) 1-(exp(-0.2x))
f <- function(x) 1-(exp(-0.2*x))
curve(f(x), xlim=c(0,20))
f <- function(x) 3*x+7
curve(f(x), xlim=c(-1,1))
f <- function(x) 1-(exp(-0.2*x))
curve(f(x), xlim=c(0,20))
f <- function(x) exp(2x)/(1+exp(2x))
f <- function(x) exp(2*x)/(1+exp(2*x))
curve(f(x), xlim=c(-3,3))
f <- function(x) sin(12*(x+0.2))/(x+0.2)
curve(f(x), xlim=c(0,1))
data <- read.csv("~/Downloads/8oBqSbJpF1EY.csv")
View(data)
x <- c(24, 26, 27, 35, 34, 17, 24, 21, 66, 59, 34, 35, 28)
y <- c(26, 48, 49, 3, 20, 28, 26, 51, 35, 48, 17, 35, 46, 24)
t.test(x, y, alternative = "two.sided", var.equal = FALSE)
x <- c(24, 26, 27, 35, 34, 17, 24, 21, 66, 59, 34, 35, 28)
y <- c(26, 48, 49, 3, 20, 28, 26, 51, 35, 48, 17, 35, 46, 24)
t.test(x, y, alternative = "greater", var.equal = FALSE)
t <- c(175, 192, 184, 486, 97, 358, 229, 306, 179)
s <- c(115, 307, 306, 628, 154, 355, 309, 242, 219)
t.test(t, s, alternative = "two-sided", var.equal = FALSE)
t.test(t, s, alternative = "two.sided", var.equal = FALSE)
randon<- read.csv("8oBqSbJpF1EY.csv", header=T)
power.anova.test
?power.anova.test
power.anova.test(groups = 3, n = 20, between.var = var(c(0,0,6), within.var = 50 ,sig.level = .02)
?power.anova.test
power.anova.test(groups = 3, n = 20, between.var = var(c(0,0,6)), within.var = 50 ,sig.level = .02)
power.anova.test(groups = 3, n = 20, between.var = var(c(0,0,6)), within.var = 50 ,sig.level = .02)
power.anova.test(groups = 3, between.var = var(c(0,0,6)), within.var = 50 ,sig.level = .02, power =0.85)
interaction.plot(as.factor(chemical$catalyst),as.factor(chemical$reagent),chemical$yield)
plastic<- read.csv("/Users/carinathiriot/Downloads/Plastic Bag Data.csv", header=TRUE)
plastic<- read.csv("/Users/student/Desktop.Plastic Bag Data.csv", header=TRUE)
plastic<- read.csv("/Users/student/Desktop.Plastic Bag Data.csv", header=TRUE)
plastic<- read.csv("/Users/student/Desktop/Plastic Bag Data.csv", header=TRUE)
plastic<- read.csv("/Users/student/Desktop/Plastic Bag Data.csv", header=TRUE)
plastic<- read.csv("/Users/student/Desktop/Plastic_Bag_Data.csv", header=TRUE)
plastic<- read.csv("Users/student/Desktop/Plastic Bag Data.csv", header=TRUE)
plastic<- read.csv("/Users/student/Desktop/Plastic Bag Data - Sheet1.csv", header=TRUE)
plastic<- read.csv("/Users/student/Desktop/Plastic Bag Data - Sheet1.csv", header=TRUE)
Usedness<- as.factor(plastic$Usedness)
Type<-as.factor(plastic$Type)
Weight<-as.factor(plastic$Weight)
boxplot(weight~type)
plastic<- read.csv("/Users/student/Desktop/Plastic Bag Data - Sheet1.csv", header=TRUE)
Usedness<- as.factor(plastic$Usedness)
Type<-as.factor(plastic$Type)
Weight<-as.factor(plastic$Weight)
boxplot(Weight~Type)
tapply(plastic$Weight, plastic$Type, sd)
tapply(plastic$Weight, plastic$Usedness, sd)
model<- lm(Weight~Type+Usedness+Type*Usedness, data=plastic)
anova(model)
interaction.plot(Usedness, Type, plastic$Weight)
tapply(plastic$Weight, plastic$Type, mean)
tapply(plastic$Weight, plastic$Usedness, mean)
1-qt(0.05,10)
1-qt(0.025,10)
qt(0.025,10)
anova(model)
my_data <- read.delim("marketing.txt")
library(tidyverse)
?diamonds
View(diamonds)
filter(diamonds, cut == "Ideal")
library(tidymodels)
library(embed)
library(vroom)
# read in the data
amazon_training  <- vroom("/Users/student/Desktop/STAT348/AmazonEmployeeAccess/train.csv")
amazon_test <- vroom("/Users/student/Desktop/STAT348/AmazonEmployeeAccess/test.csv")
amazon_training$ACTION <- as.factor(amazon_training$ACTION)
# model for random forest
my_mod <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 500) %>%
set_engine("ranger") %>%
set_mode("classification")
# create a recipe
my_recipe <- recipe(ACTION~., data=amazon_training) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .001) %>% # combines categorical values that occur <5% into an "other" value
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION))
prep <- prep(my_recipe)
bake(prep, new_data=amazon_training)
bake(prep, new_data=amazon_test)
# Create a workflow with model & recipe
amazon_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data = amazon_training)
# Set up grid of tuning values
tuning_grid <- grid_regular(mtry(range = c(1,ncol(amazon_training)-1)),
min_n(),
levels = 5)
# Set up K-fold CV
folds <- vfold_cv(amazon_training, v = 10, repeats=1)
CV_results <- amazon_workflow %>%
tune_grid(resamples=folds,
grid=tuning_grid,
metrics=metric_set(roc_auc))
# Find best tuning parameters
bestTune <- CV_results %>%
select_best("roc_auc")
# Finalize workflow and predict
final_wf <-
amazon_workflow %>%
finalize_workflow(bestTune) %>%
fit(data=amazon_training)
final_wf %>%
predict(new_data = amazon_test)
# Formatting for submission
amazon_predictions <- final_wf %>%
predict(new_data = amazon_test, type="prob") %>%
bind_cols(amazon_test) %>%
rename(ACTION=.pred_1) %>%
select(id, ACTION)
vroom_write(x = amazon_predictions, file = "/Users/student/Desktop/STAT348/AmazonEmployeeAccess/RandomForest.csv", delim = ",")
library(tidyverse)
library(tidymodels)
library(embed)
library(vroom)
library(patchwork)
library(modeltime) #Extensions of tidymodels to time series
library(timetk) #Some nice time series functions
# Read in the data
setwd("/Users/student/Desktop/STAT348/ItemDemandChallenge")
Item_training <-vroom("/Users/student/Desktop/STAT348/ItemDemandChallenge/train.csv")
Item_test <- vroom("/Users/student/Desktop/STAT348/ItemDemandChallenge/test.csv")
# Cross-Validation Set-up
train <- Item_training %>% filter(store==3, item==17)
cv_split <- time_series_split(train, assess="3 months", cumulative = TRUE)
cv_split %>%
tk_time_series_cv_plan() %>% #Put into a data frame
plot_time_series_cv_plan(date, sales, .interactive=FALSE)
es_model <- exp_smoothing() %>%
set_engine("ets") %>%
fit(sales~date, data=training(cv_split))
## Cross-validate to tune model
cv_results <- modeltime_calibrate(es_model,new_data = testing(cv_split))
## Visualize CV results
cv_results %>%
modeltime_forecast(new_data = testing(cv_split),actual_data = train) %>%
plot_modeltime_forecast(.interactive=TRUE)
## Evaluate the accuracy
cv_results %>%
modeltime_accuracy() %>%
table_modeltime_accuracy(.interactive = FALSE)
## Refit to all data then forecast
es_fullfit <- cv_results %>%
modeltime_refit(data = train)
es_preds <- es_fullfit %>%
modeltime_forecast(h = "3 months") %>%
rename(date=.index, sales=.value) %>%
select(date, sales) %>%
full_join(., y=Item_test, by="date") %>%
select(id, sales)
es_fullfit %>%
modeltime_forecast(h = "3 months", actual_data = train) %>%
plot_modeltime_forecast(.interactive=FALSE)
es_fullfit %>%
modeltime_forecast(h = "3 months", actual_data = train) %>%
plot_modeltime_forecast(.interactive=TRUE)
# Cross-Validation Set-up
train1 <- Item_training %>% filter(store==3, item==17)
cv_split1 <- time_series_split(train1, assess="3 months", cumulative = TRUE)
cv_split1 %>%
tk_time_series_cv_plan() %>% #Put into a data frame
plot_time_series_cv_plan(date, sales, .interactive=FALSE)
es_model1 <- exp_smoothing() %>%
set_engine("ets") %>%
fit(sales~date, data=training(cv_split1))
## Cross-validate to tune model
cv_results1 <- modeltime_calibrate(es_model1,new_data = testing(cv_split1))
## Visualize CV results
cv_results1 %>%
modeltime_forecast(new_data = testing(cv_split1),actual_data = train1) %>%
plot_modeltime_forecast(.interactive=TRUE)
## Evaluate the accuracy
cv_results1 %>%
modeltime_accuracy() %>%
table_modeltime_accuracy(.interactive = FALSE)
## Refit to all data then forecast
es_fullfit1 <- cv_results1 %>%
modeltime_refit(data = train1)
es_preds1 <- es_fullfit1 %>%
modeltime_forecast(h = "3 months") %>%
rename(date=.index, sales=.value) %>%
select(date, sales) %>%
full_join(., y=Item_test, by="date") %>%
select(id, sales)
es_fullfit1 %>%
modeltime_forecast(h = "3 months", actual_data = train1) %>%
plot_modeltime_forecast(.interactive=TRUE)
# Cross-Validation Set-up
train2 <- Item_training %>% filter(store==4, item==25)
cv_split2 <- time_series_split(train2, assess="3 months", cumulative = TRUE)
cv_split2 %>%
tk_time_series_cv_plan() %>% #Put into a data frame
plot_time_series_cv_plan(date, sales, .interactive=FALSE)
es_model2 <- exp_smoothing() %>%
set_engine("ets") %>%
fit(sales~date, data=training(cv_split2))
## Cross-validate to tune model
cv_results2 <- modeltime_calibrate(es_model2,new_data = testing(cv_split2))
## Visualize CV results
cv_results2 %>%
modeltime_forecast(new_data = testing(cv_split2),actual_data = train2) %>%
plot_modeltime_forecast(.interactive=TRUE)
## Evaluate the accuracy
cv_results2 %>%
modeltime_accuracy() %>%
table_modeltime_accuracy(.interactive = FALSE)
## Refit to all data then forecast
es_fullfit2 <- cv_results2 %>%
modeltime_refit(data = train2)
es_preds2 <- es_fullfit2 %>%
modeltime_forecast(h = "3 months") %>%
rename(date=.index, sales=.value) %>%
select(date, sales) %>%
full_join(., y=Item_test, by="date") %>%
select(id, sales)
es_fullfit2 %>%
modeltime_forecast(h = "3 months", actual_data = train2) %>%
plot_modeltime_forecast(.interactive=TRUE)
actual_prediction2 <- es_fullfit2 %>%
modeltime_forecast(h = "3 months", actual_data = train2) %>%
plot_modeltime_forecast(.interactive=TRUE)
CVresult2 <- cv_results2 %>%
modeltime_forecast(new_data = testing(cv_split2),actual_data = train2) %>%
plot_modeltime_forecast(.interactive=TRUE)
actual_prediction1 <- es_fullfit1 %>%
modeltime_forecast(h = "3 months", actual_data = train1) %>%
plot_modeltime_forecast(.interactive=TRUE)
CVResult1 <- cv_results1 %>%
modeltime_forecast(new_data = testing(cv_split1),actual_data = train1) %>%
plot_modeltime_forecast(.interactive=TRUE)
plot <- (CVResult1 + CVresult2)/(actual_prediction1 + actual_prediction2)
library(ggplot2)
plot <- (CVResult1 + CVresult2) / (actual_prediction1 + actual_prediction2)
plot <- plotly::subplot(CVResult1, CVresult2, actual_prediction1, actual_prediction2)
plot
plot <- plotly::subplot(CVResult1, CVresult2, actual_prediction1, actual_prediction2, nrows=2)
plot
setwd("/Users/student/Desktop/STAT348/ItemDemandChallenge")
